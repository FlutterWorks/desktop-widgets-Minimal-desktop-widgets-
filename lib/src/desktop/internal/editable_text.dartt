import 'dart:async';
import 'dart:math' as math;
import 'dart:ui' as ui hide TextStyle;

import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';

import 'editable.dart';

export 'package:flutter/services.dart'
    show
        TextEditingValue,
        TextSelection,
        TextInputType,
        SmartQuotesType,
        SmartDashesType;

const Duration _kCursorBlinkHalfPeriod = Duration(milliseconds: 600);
const Duration _kCursorBlinkWaitForStart = Duration(milliseconds: 200);

class DesktopTextEditingController extends ValueNotifier<TextEditingValue> {
  DesktopTextEditingController({String text})
      : super(text == null
            ? TextEditingValue.empty
            : TextEditingValue(text: text));

  DesktopTextEditingController.fromValue(TextEditingValue value)
      : super(value ?? TextEditingValue.empty);

  String get text => value.text;

  set text(String newText) {
    value = value.copyWith(
      text: newText,
      selection: TextSelection.collapsed(offset: newText.length),
      composing: TextRange.empty,
    );
  }

  TextSpan buildTextSpan({TextStyle style, bool withComposing}) {
    if (!value.composing.isValid || !withComposing) {
      return TextSpan(style: style, text: text);
    }
    final TextStyle composingStyle = style.merge(
      const TextStyle(decoration: TextDecoration.underline),
    );
    return TextSpan(style: style, children: <TextSpan>[
      TextSpan(text: value.composing.textBefore(value.text)),
      TextSpan(
        style: composingStyle,
        text: value.composing.textInside(value.text),
      ),
      TextSpan(text: value.composing.textAfter(value.text)),
    ]);
  }

  TextSelection get selection => value.selection;

  set selection(TextSelection newSelection) {
    if (newSelection.start > text.length || newSelection.end > text.length)
      throw FlutterError.fromParts(<DiagnosticsNode>[
        ErrorSummary('Invalid text selection: $newSelection')
      ]);
    value = value.copyWith(selection: newSelection, composing: TextRange.empty);
  }

  void clear() {
    value = TextEditingValue.empty;
  }

  void clearComposing() {
    value = value.copyWith(composing: TextRange.empty);
  }
}

class DesktopEditableText extends StatefulWidget {
  DesktopEditableText({
    Key? key,
    required this.controller,
    required this.focusNode,
    this.readOnly = false,
    required this.style,
    required this.cursorColor,
    this.textAlign = TextAlign.start,
    this.textDirection,
    this.locale,
    this.maxLines = 1,
    this.minLines,
    this.expands = false,
    this.forceLine = true,
    this.textWidthBasis = TextWidthBasis.parent,
    this.autofocus = false,
    bool showCursor,
    this.textScaleFactor,
    StrutStyle strutStyle,
    TextInputType? keyboardType,
    this.textInputAction,
    this.selectionColor,
    this.selectionForeground,
    this.onChanged,
    this.onEditingComplete,
    this.rendererIgnoresPointer = true,
    this.onSubmitted,
    List<TextInputFormatter>? inputFormatters,
    this.cursorWidth = 1.0,
    this.cursorOffset,
  })  : assert(style != null),
        assert(autofocus != null),
        assert(focusNode != null),
        _strutStyle = strutStyle,
        inputFormatters = maxLines == 1
            ? <TextInputFormatter>[
                ...inputFormatters ??
                    const Iterable<TextInputFormatter>.empty(),
              ]
            : inputFormatters,
        keyboardType = keyboardType ??
            (maxLines == 1 ? TextInputType.text : TextInputType.multiline),
        showCursor = showCursor ?? !readOnly,
        super(key: key);

  final DesktopTextEditingController controller;

  final FocusNode focusNode;

  final TextWidthBasis textWidthBasis;

  final bool readOnly;

  final bool forceLine;

  final bool showCursor;

  final TextStyle style;

  final Color selectionForeground;

  final TextAlign textAlign;

  final TextDirection textDirection;

  final Locale locale;

  final Color cursorColor;

  final int maxLines;

  final int minLines;

  final bool expands;

  final bool autofocus;

  final TextInputType keyboardType;

  final TextInputAction textInputAction;

  final ValueChanged<String> onChanged;

  final VoidCallback onEditingComplete;

  final ValueChanged<String> onSubmitted;

  final List<TextInputFormatter> inputFormatters;

  final double cursorWidth;

  final Offset cursorOffset;

  final Color selectionColor;

  final bool rendererIgnoresPointer;

  StrutStyle get strutStyle {
    if (_strutStyle == null) {
      return style != null
          ? StrutStyle.fromTextStyle(style, forceStrutHeight: true)
          : StrutStyle.disabled;
    }
    return _strutStyle.inheritFromTextStyle(style);
  }

  final StrutStyle _strutStyle;

  final double textScaleFactor;

  static bool debugDeterministicCursor = false;

  @override
  DesktopEditableTextState createState() => DesktopEditableTextState();
}

class DesktopEditableTextState extends State<DesktopEditableText>
    with
        AutomaticKeepAliveClientMixin<DesktopEditableText>,
        WidgetsBindingObserver,
        TickerProviderStateMixin<DesktopEditableText>
    implements TextInputClient {
  final GlobalKey _editableKey = GlobalKey();

  Timer? _cursorTimer;
  bool _targetCursorVisibility = false;

  int _cursorResetLocation = -1;
  //Offset _previousSelectedPoint = Offset.zero;

  void _cursorTick(Timer timer) {
    _targetCursorVisibility = !_targetCursorVisibility;
    final double targetOpacity = _targetCursorVisibility ? 1.0 : 0.0;
    // if (_obscureShowCharTicksPending > 0) {
    //   setState(() {
    //     _obscureShowCharTicksPending--;
    //   });
    // }

    setState(() {});
  }

  void _startCursorTimer() {
    if (EditableText.debugDeterministicCursor) return;
    _cursorTimer = Timer.periodic(_kCursorBlinkHalfPeriod, _cursorTick);

    _targetCursorVisibility = true;
  }

  void _stopCursorTimer({bool resetCharTicks = true}) {
    _cursorTimer?.cancel();
    _cursorTimer = null;

    if (DesktopEditableText.debugDeterministicCursor) return;

    _targetCursorVisibility = false;
  }

  void _startOrStopCursorTimerIfNeeded() {
    if (_cursorTimer == null && _hasFocus && _value.selection.isCollapsed) {
      _startCursorTimer();
    } else if (_cursorTimer != null &&
        (!_hasFocus || !_value.selection.isCollapsed)) {
      _stopCursorTimer();
    }
  }

  void _handleKeyEvent(RawKeyEvent keyEvent) {
    if (keyEvent is! RawKeyDownEvent) {
      return;
    }

    final Set<LogicalKeyboardKey> keysPressed =
        LogicalKeyboardKey.collapseSynonyms(RawKeyboard.instance.keysPressed);
    final LogicalKeyboardKey key = keyEvent.logicalKey;

    if (!_nonModifierKeys.contains(key) ||
        keysPressed.difference(_modifierKeys).length > 1 ||
        keysPressed.difference(_interestingKeys).isNotEmpty) {
      return;
    }

    _stopCursorTimer(resetCharTicks: false);
    _startCursorTimer();

    bool isWordModifierPressed = keyEvent.isControlPressed;
    bool isLineModifierPressed = keyEvent.isAltPressed;
    bool isShortcutModifierPressed = keyEvent.isControlPressed;

    if (_movementKeys.contains(key)) {
      _handleMovement(
          key: key,
          wordModifier: isWordModifierPressed,
          lineModifier: isLineModifierPressed,
          shift: keyEvent.isShiftPressed);
    } else if (isShortcutModifierPressed && _shortcutKeys.contains(key)) {
      _handleShortcuts(key);
    } else if (_deleteKeys.contains(key)) {
      _handleDelete(key);
    }
  }

  void _handleMovement({
    required LogicalKeyboardKey key,
    required bool wordModifier,
    required bool lineModifier,
    required bool shift,
  }) {
    if (wordModifier && lineModifier) {
      return;
    }

    TextSelection newSelection = _selection;

    final bool rightArrow = key == LogicalKeyboardKey.arrowRight;
    final bool leftArrow = key == LogicalKeyboardKey.arrowLeft;
    final bool upArrow = key == LogicalKeyboardKey.arrowUp;
    final bool downArrow = key == LogicalKeyboardKey.arrowDown;
    final bool end = key == LogicalKeyboardKey.end;
    final bool home = key == LogicalKeyboardKey.home;

    if (leftArrow || rightArrow && !(leftArrow && rightArrow)) {
      if (wordModifier) {
      } else if (lineModifier) {
      } else {
        if (rightArrow && newSelection.extentOffset < _text.length) {
          newSelection = newSelection.copyWith(
              extentOffset: newSelection.extentOffset + 1);

          if (shift) {
            _cursorResetLocation += 1;
          }
        } else if (leftArrow && newSelection.extentOffset > 0) {
          newSelection = newSelection.copyWith(
              extentOffset: newSelection.extentOffset - 1);

          if (shift) {
            _cursorResetLocation -= 1;
          }
        }
      }
    } else if (end) {
      newSelection = newSelection.copyWith(extentOffset: _text.length);
    } else if (home) {
      newSelection = newSelection.copyWith(extentOffset: 0);
    } else if (downArrow || upArrow) {
      final Offset point = renderEditable
          .getPointForPosition(TextPosition(offset: newSelection.extentOffset));

      TextPosition position = downArrow
          ? renderEditable.getNextLinePosition(point)
          : renderEditable.getPreviousLinePosition(point);

      if (position.offset == newSelection.extentOffset) {
        if (downArrow) {
          newSelection = newSelection.copyWith(extentOffset: _text.length);
        } else if (upArrow) {
          newSelection = newSelection.copyWith(extentOffset: 0);
        }
      } else {
        newSelection = newSelection.copyWith(extentOffset: position.offset);
      }
    }

    if (!shift) {
      int newOffset = newSelection.extentOffset;

      if (!_selection.isCollapsed) {
        // Just clear the selection.
        if (leftArrow) {
          newOffset = newSelection.baseOffset < newSelection.extentOffset
              ? _selection.baseOffset
              : _selection.extentOffset;
        } else if (rightArrow) {
          newOffset = newSelection.baseOffset > newSelection.extentOffset
              ? _selection.baseOffset
              : _selection.extentOffset;
        }
      }

      newSelection =
          TextSelection.fromPosition(TextPosition(offset: newOffset));
    }

    _selection = newSelection;
  }

  Future<void> _handleShortcuts(LogicalKeyboardKey key) async {
    assert(_shortcutKeys.contains(key));

    if (key == LogicalKeyboardKey.keyC) {
      if (!_selection.isCollapsed) {
        Clipboard.setData(ClipboardData(text: _selection.textInside(_text)));
      }

      return;
    }

    if (key == LogicalKeyboardKey.keyX) {
      if (!_selection.isCollapsed) {
        TextEditingValue value = _value;
        Clipboard.setData(
            ClipboardData(text: value.selection.textInside(value.text)));
        value = TextEditingValue(
            text: value.selection.textBefore(value.text) +
                value.selection.textAfter(value.text),
            selection: TextSelection.collapsed(offset: value.selection.start));

        _formatAndSetValue(value);
      }

      return;
    }

    if (key == LogicalKeyboardKey.keyV) {
      TextEditingValue value = _value;
      final ClipboardData data = await Clipboard.getData(Clipboard.kTextPlain);

      if (data != null) {
        value = TextEditingValue(
            text: value.selection.textBefore(value.text) +
                data.text +
                value.selection.textAfter(value.text),
            selection: TextSelection.collapsed(
                offset: value.selection.start + data.text.length));

        _formatAndSetValue(value);
      }

      return;
    }

    if (key == LogicalKeyboardKey.keyA) {
      _selection =
          _selection.copyWith(baseOffset: 0, extentOffset: _text.length);

      return;
    }
  }

  void _handleDelete(LogicalKeyboardKey key) {
    if (key == LogicalKeyboardKey.delete) {
      if (_selection.isCollapsed) {
        if (_selection.extentOffset < _text.length) {
          TextSelection newSelection =
              _selection.copyWith(extentOffset: _selection.extentOffset + 1);

          _value = TextEditingValue(
              text: newSelection.textBefore(_text) +
                  newSelection.textAfter(_text),
              selection: TextSelection.collapsed(offset: newSelection.start));
        }
      } else {
        _value = TextEditingValue(
            text: _selection.textBefore(_text) + _selection.textAfter(_text),
            selection: TextSelection.collapsed(offset: _selection.start));
      }
    } else if (key == LogicalKeyboardKey.backspace) {
      if (_selection.isCollapsed) {
        if (_selection.extentOffset > 0) {
          TextSelection newSelection =
              _selection.copyWith(extentOffset: _selection.extentOffset - 1);

          _value = TextEditingValue(
              text: newSelection.textBefore(_text) +
                  newSelection.textAfter(_text),
              selection: TextSelection.collapsed(offset: newSelection.start));
        }
      } else {
        _value = TextEditingValue(
            text: _selection.textBefore(_text) + _selection.textAfter(_text),
            selection: TextSelection.collapsed(offset: _selection.start));
      }
    }
  }

  void _formatAndSetValue(TextEditingValue value) {
    final bool textChanged = _value?.text != value?.text;

    if (textChanged &&
        widget.inputFormatters != null &&
        widget.inputFormatters.isNotEmpty) {
      for (final TextInputFormatter formatter in widget.inputFormatters) {
        value = formatter.formatEditUpdate(_value, value);
      }

      _value = value;
    } else {
      _value = value;
    }

    if (textChanged && widget.onChanged != null) widget.onChanged(value.text);
  }

  final ValueNotifier<bool> _cursorVisibilityNotifier =
      ValueNotifier<bool>(true);

  static final Set<LogicalKeyboardKey> _movementKeys = <LogicalKeyboardKey>{
    LogicalKeyboardKey.arrowRight,
    LogicalKeyboardKey.arrowLeft,
    LogicalKeyboardKey.arrowUp,
    LogicalKeyboardKey.arrowDown,
    LogicalKeyboardKey.end,
    LogicalKeyboardKey.home,
  };

  static final Set<LogicalKeyboardKey> _shortcutKeys = <LogicalKeyboardKey>{
    LogicalKeyboardKey.keyA,
    LogicalKeyboardKey.keyC,
    LogicalKeyboardKey.keyV,
    LogicalKeyboardKey.keyX,
  };

  static final Set<LogicalKeyboardKey> _deleteKeys = <LogicalKeyboardKey>{
    LogicalKeyboardKey.delete,
    LogicalKeyboardKey.backspace,
  };

  static final Set<LogicalKeyboardKey> _nonModifierKeys = <LogicalKeyboardKey>{
    ..._shortcutKeys,
    ..._movementKeys,
    ..._deleteKeys,
  };

  static final Set<LogicalKeyboardKey> _modifierKeys = <LogicalKeyboardKey>{
    LogicalKeyboardKey.shift,
    LogicalKeyboardKey.control,
    LogicalKeyboardKey.alt,
  };

  static final Set<LogicalKeyboardKey> _interestingKeys = <LogicalKeyboardKey>{
    ..._modifierKeys,
    ..._nonModifierKeys,
  };

  double get _devicePixelRatio =>
      MediaQuery.of(context).devicePixelRatio ?? 1.0;

  bool get _hasFocus => widget.focusNode.hasFocus;
  bool get _isMultiline => widget.maxLines > 1;

  DesktopRenderEditable get renderEditable =>
      _editableKey.currentContext.findRenderObject() as DesktopRenderEditable;

  Color get _cursorColor => _targetCursorVisibility
      ? widget.cursorColor
      : widget.cursorColor.withOpacity(0.0);

  final LayerLink _startHandleLayerLink = LayerLink();
  final LayerLink _endHandleLayerLink = LayerLink();

  bool _didAutoFocus = false;
  FocusAttachment _focusAttachment;

  TextDirection get _textDirection {
    final TextDirection result = widget.textDirection ?? TextDirection.ltr;
    return result;
  }

  TextEditingValue get _value => widget.controller.value;
  set _value(TextEditingValue value) {
    widget.controller.value = value;
  }

  TextSelection get _selection => _value.selection;

  set _selection(TextSelection value) {
    _formatAndSetValue(_value.copyWith(selection: value));
  }

  String get _text => _value.text;

  bool _listenerAttached = false;
  void _handleFocusChanged() {
    _openOrCloseInputConnectionIfNeeded();
    if (_hasFocus) {
      _startCursorTimer();
      assert(!_listenerAttached);
      RawKeyboard.instance.addListener(_handleKeyEvent);
      _listenerAttached = true;

      if (!_selection.isValid) _selection = TextSelection.collapsed(offset: 0);
    } else {
      _stopCursorTimer();
      //_value = TextEditingValue(text: _text);
      RawKeyboard.instance.removeListener(_handleKeyEvent);
      _listenerAttached = false;
    }

    updateKeepAlive();
  }

  TextInputConnection _textInputConnection;

  bool get _hasInputConnection =>
      _textInputConnection != null && _textInputConnection.attached;

  void _openInputConnection() {
    if (widget.readOnly) {
      return;
    }

    if (!_hasInputConnection) {
      _textInputConnection = TextInput.attach(
        this,
        TextInputConfiguration(
          inputType: TextInputType.text,
          obscureText: false,
          autocorrect: false,
          smartDashesType: SmartDashesType.disabled,
          smartQuotesType: SmartQuotesType.disabled,
          enableSuggestions: false,
          inputAction: widget.textInputAction ??
              (widget.keyboardType == TextInputType.multiline
                  ? TextInputAction.newline
                  : TextInputAction.done),
          textCapitalization: TextCapitalization.none,
        ),
      );
      _textInputConnection.show();

      // _updateSizeAndTransform();
      final TextStyle style = widget.style;
      _textInputConnection
        ..setStyle(
          fontFamily: style.fontFamily,
          fontSize: style.fontSize,
          fontWeight: style.fontWeight,
          textDirection: _textDirection,
          textAlign: widget.textAlign,
        )
        ..setEditingState(TextEditingValue.empty);
    } else {
      _textInputConnection.show();
    }
  }

  void _closeInputConnectionIfNeeded() {
    if (_hasInputConnection) {
      _textInputConnection.close();
      _textInputConnection = null;
    }
  }

  void _openOrCloseInputConnectionIfNeeded() {
    if (_hasFocus && widget.focusNode.consumeKeyboardToken()) {
      _openInputConnection();
    } else if (!_hasFocus) {
      _closeInputConnectionIfNeeded();
      widget.controller.clearComposing();
    }
  }

  void _didChangeTextEditingValue() {
    _updateRemoteEditingValueIfNeeded();
    _startOrStopCursorTimerIfNeeded();
    setState(() {});
  }

  void _finalizeEditing(bool shouldUnfocus) {
    if (widget.onEditingComplete != null) {
      widget.onEditingComplete();
    } else {
      widget.controller.clearComposing();
      if (shouldUnfocus) widget.focusNode.unfocus();
    }

    if (widget.onSubmitted != null) {
      widget.onSubmitted(_text);
    }
  }

  TextSelection _dragSelection;

  void _handlePanDown(DragDownDetails event) {
    if (_hasFocus) {
      TextPosition position =
          renderEditable.getPositionForPoint(event.globalPosition);
      _dragSelection = TextSelection.fromPosition(position);
    }
  }

  void _handlePanStart(DragStartDetails event) {
    if (_hasFocus) {
      TextPosition position =
          renderEditable.getPositionForPoint(event.globalPosition);
      _dragSelection ??= TextSelection.fromPosition(position);

      assert(_dragSelection != null);

      _selection = _dragSelection.copyWith(
          extentOffset: position.offset, affinity: position.affinity);
    }
  }

  void _handlePanUpdate(DragUpdateDetails event) {
    if (_hasFocus) {
      assert(_dragSelection != null);

      TextPosition position =
          renderEditable.getPositionForPoint(event.globalPosition);
      _selection = _dragSelection.copyWith(
          extentOffset: position.offset, affinity: position.affinity);
    }
  }

  void _handlePanEnd(DragEndDetails event) {
    _dragSelection = null;
  }

  void _handlePanCancel() {
    _dragSelection = null;
  }

  void _handleTapDown(TapDownDetails event) {
    if (!_hasFocus) {
      widget.focusNode.requestFocus();
    }

    TextPosition position =
        renderEditable.getPositionForPoint(event.globalPosition);
    _selection = TextSelection.fromPosition(position);
  }

  @override
  void updateEditingValue(TextEditingValue value) {
    if (widget.readOnly) {
      return;
    }

    if (value.text.length > 0) {
      TextEditingValue newValue = _value;

      newValue = TextEditingValue(
          text: newValue.selection.textBefore(newValue.text) +
              value.text +
              newValue.selection.textAfter(newValue.text),
          selection: TextSelection.collapsed(
              offset: newValue.selection.start + value.text.length));

      _formatAndSetValue(newValue);

      _stopCursorTimer(resetCharTicks: false);
      _startCursorTimer();
    }
  }

  void _updateRemoteEditingValueIfNeeded() {
    if (!_hasInputConnection) {
      return;
    }

    final TextEditingValue localValue = _value;
    _textInputConnection.setEditingState(localValue.copyWith(
        text: "", selection: TextSelection.collapsed(offset: 0)));
  }

  @override
  void performPrivateCommand(String action, Map<String, dynamic> data) {
    
  }

  @override
  void performAction(TextInputAction action) {
    switch (action) {
      case TextInputAction.newline:
        if (!_isMultiline) _finalizeEditing(true);
        break;
      case TextInputAction.done:
        _finalizeEditing(true);
        break;
      default:
        _finalizeEditing(false);
        break;
    }
  }

  @override
  void updateFloatingCursor(RawFloatingCursorPoint point) {}

  @override
  void showAutocorrectionPromptRect(int start, int end) {}

  AutofillScope get currentAutofillScope => null;

  @override
  TextEditingValue get currentTextEditingValue {
    return TextEditingValue.empty;
  }

  @override
  void connectionClosed() {
    if (_hasInputConnection) {
      _textInputConnection.connectionClosedReceived();
      _textInputConnection = null;
      _finalizeEditing(true);
    }
  }

  @override
  bool get wantKeepAlive => widget.focusNode.hasFocus;

  @override
  void didChangeMetrics() {}

  @override
  void initState() {
    super.initState();

    widget.controller.addListener(_didChangeTextEditingValue);

    _focusAttachment = widget.focusNode.attach(context);
    widget.focusNode.addListener(_handleFocusChanged);
    _cursorVisibilityNotifier.value = widget.showCursor;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (!_didAutoFocus && widget.autofocus) {
      FocusScope.of(context).autofocus(widget.focusNode);
      _didAutoFocus = true;
    }
  }

  @override
  void didUpdateWidget(DesktopEditableText oldWidget) {
    super.didUpdateWidget(oldWidget);

    if (widget.controller != oldWidget.controller) {
      oldWidget.controller.removeListener(_didChangeTextEditingValue);
      widget.controller.addListener(_didChangeTextEditingValue);
    }

    if (widget.readOnly) {
      _closeInputConnectionIfNeeded();
    } else {
      if (oldWidget.readOnly && _hasFocus) _openInputConnection();
    }

    if (widget.focusNode != oldWidget.focusNode) {
      oldWidget.focusNode.removeListener(_handleFocusChanged);
      _focusAttachment?.detach();
      _focusAttachment = widget.focusNode.attach(context);
      widget.focusNode.addListener(_handleFocusChanged);
      updateKeepAlive();
    }

    if (widget.style != oldWidget.style) {
      final TextStyle style = widget.style;

      if (_textInputConnection != null && _textInputConnection.attached) {
        _textInputConnection.setStyle(
            fontFamily: style.fontFamily,
            fontSize: style.fontSize,
            fontWeight: style.fontWeight,
            textDirection: _textDirection,
            textAlign: widget.textAlign);
      }
    }
  }

  @override
  void dispose() {
    widget.focusNode.removeListener(_handleFocusChanged);
    _closeInputConnectionIfNeeded();
    assert(!_hasInputConnection);
    _stopCursorTimer();
    assert(_cursorTimer == null);
    _focusAttachment.detach();
    widget.controller.removeListener(_didChangeTextEditingValue);
    if (_listenerAttached) {
      RawKeyboard.instance.removeListener(_handleKeyEvent);
    }
    super.dispose();
  }

  Map<Type, GestureRecognizerFactory> get _gestures {
    final Map<Type, GestureRecognizerFactory> gestures =
        <Type, GestureRecognizerFactory>{};

    gestures[PanGestureRecognizer] =
        GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>(
      () => PanGestureRecognizer(
        debugOwner: this,
      ),
      (PanGestureRecognizer instance) {
        instance
          ..onStart = _handlePanStart
          ..onCancel = _handlePanCancel
          ..onUpdate = _handlePanUpdate
          ..onDown = _handlePanDown
          ..onEnd = _handlePanEnd;
      },
    );

    gestures[TapGestureRecognizer] =
        GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>(
      () => TapGestureRecognizer(
        debugOwner: this,
      ),
      (TapGestureRecognizer instance) {
        instance..onTapDown = _handleTapDown;
      },
    );

    return gestures;
  }

  @override
  Widget build(BuildContext context) {
    _focusAttachment.reparent();
    super.build(context);

    Widget result = _Editable(
      key: _editableKey,
      startHandleLayerLink: _startHandleLayerLink,
      endHandleLayerLink: _endHandleLayerLink,
      textSpan: buildTextSpan(),
      value: _value,
      cursorColor: _cursorColor,
      textDirection: _textDirection,
      devicePixelRatio: _devicePixelRatio,
      showCursor: DesktopEditableText.debugDeterministicCursor
          ? ValueNotifier<bool>(widget.showCursor)
          : _cursorVisibilityNotifier,
      textScaleFactor:
          widget.textScaleFactor ?? MediaQuery.textScaleFactorOf(context),
      obscureText: false,
      autocorrect: false,
      forceLine: widget.forceLine,
      strutStyle: widget.strutStyle,
      selectionColor: widget.selectionColor,
      maxLines: widget.maxLines,
      minLines: widget.minLines,
      expands: widget.expands,
      textAlign: widget.textAlign,
      locale: widget.locale,
      textWidthBasis: widget.textWidthBasis,
      cursorWidth: widget.cursorWidth,
      cursorOffset: widget.cursorOffset,
      paintCursorAboveText: true,
    );

    result = RawGestureDetector(
      behavior: HitTestBehavior.opaque,
      gestures: _gestures,
      child: result,
    );

    return result;
  }

  TextSpan buildTextSpan() {
    return widget.controller.buildTextSpan(
      style: widget.style,
      withComposing: !widget.readOnly,
    );
  }
}

class _Editable extends LeafRenderObjectWidget {
  const _Editable({
    Key?? key,
    required this.textDirection,
    this.textSpan,
    this.value,
    this.startHandleLayerLink,
    this.endHandleLayerLink,
    this.cursorColor,
    this.showCursor,
    this.forceLine,
    this.textWidthBasis,
    this.maxLines,
    this.minLines,
    this.expands,
    this.strutStyle,
    this.selectionColor,
    this.textScaleFactor,
    this.textAlign,
    this.locale,
    this.obscureText,
    this.autocorrect,
    this.enableSuggestions,
    this.cursorWidth,
    this.cursorOffset,
    this.paintCursorAboveText,
    this.devicePixelRatio,
  })  : assert(textDirection != null),
        super(key: key);

  final TextSpan? textSpan;
  final TextEditingValue? value;
  final Color? cursorColor;
  final LayerLink? startHandleLayerLink;
  final LayerLink? endHandleLayerLink;
  final ValueNotifier<bool>? showCursor;
  final bool? forceLine;
  final int? maxLines;
  final int? minLines;
  final bool? expands;
  final StrutStyle? strutStyle;
  final Color? selectionColor;
  final double? textScaleFactor;
  final TextAlign? textAlign;
  final TextDirection textDirection;
  final Locale? locale;
  final bool? obscureText;
  final TextWidthBasis? textWidthBasis;
  final bool? autocorrect;
  final bool? enableSuggestions;
  final double? cursorWidth;
  final Offset? cursorOffset;
  final double? devicePixelRatio;
  final bool? paintCursorAboveText;

  @override
  DesktopRenderEditable createRenderObject(BuildContext context) {
    return DesktopRenderEditable(
      text: textSpan,
      cursorColor: cursorColor,
      startHandleLayerLink: startHandleLayerLink,
      endHandleLayerLink: endHandleLayerLink,
      showCursor: showCursor,
      forceLine: forceLine,
      maxLines: maxLines,
      minLines: minLines,
      expands: expands,
      strutStyle: strutStyle,
      selectionColor: selectionColor,
      textScaleFactor: textScaleFactor,
      textAlign: textAlign,
      textDirection: textDirection,
      locale: locale ?? Localizations.localeOf(context, nullOk: true),
      selection: value.selection,
      obscureText: obscureText,
      textWidthBasis: textWidthBasis,
      cursorWidth: cursorWidth,
      cursorOffset: cursorOffset,
      paintCursorAboveText: paintCursorAboveText,
      devicePixelRatio: devicePixelRatio,
    );
  }

  @override
  void updateRenderObject(
      BuildContext context, DesktopRenderEditable renderObject) {
    renderObject
      ..text = textSpan
      ..cursorColor = cursorColor
      ..startHandleLayerLink = startHandleLayerLink
      ..endHandleLayerLink = endHandleLayerLink
      ..showCursor = showCursor
      ..forceLine = forceLine
      ..maxLines = maxLines
      ..minLines = minLines
      ..expands = expands
      ..strutStyle = strutStyle
      ..selectionColor = selectionColor
      ..textScaleFactor = textScaleFactor
      ..textAlign = textAlign
      ..textDirection = textDirection
      ..locale = locale ?? Localizations.localeOf(context, nullOk: true)
      ..selection = value.selection
      ..obscureText = obscureText
      ..textWidthBasis = textWidthBasis
      ..cursorWidth = cursorWidth
      ..cursorOffset = cursorOffset
      ..paintCursorAboveText = paintCursorAboveText
      ..devicePixelRatio = devicePixelRatio;
  }
}