import 'dart:math' as math;
import 'dart:ui' show TextBox;

import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/services.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';

// FIXME(as) Fix everything. 
class DesktopRenderEditable extends RenderBox
    with RelayoutWhenSystemFontsChangeMixin {
  DesktopRenderEditable({
    TextSpan text,
    required TextDirection textDirection,
    TextAlign textAlign = TextAlign.start,
    Color cursorColor,
    ValueNotifier<bool> showCursor,
    required LayerLink startHandleLayerLink,
    required LayerLink endHandleLayerLink,
    int maxLines = 1,
    int minLines,
    bool expands = false,
    StrutStyle strutStyle,
    Color selectionColor,
    double textScaleFactor = 1.0,
    TextSelection selection,
    bool forceLine = true,
    TextWidthBasis textWidthBasis = TextWidthBasis.parent,
    bool obscureText = false,
    Locale locale,
    double cursorWidth = 1.0,
    bool paintCursorAboveText = false,
    Offset cursorOffset,
    double devicePixelRatio = 1.0,
  })  : assert(textAlign != null),
        assert(textDirection != null),
        assert(startHandleLayerLink != null),
        assert(endHandleLayerLink != null),
        assert(maxLines == null || maxLines > 0),
        assert(minLines == null || minLines > 0),
        assert(
          (maxLines == null) || (minLines == null) || (maxLines >= minLines),
          'minLines can\'t be greater than maxLines',
        ),
        assert(expands != null),
        assert(
          !expands || (maxLines == null && minLines == null),
          'minLines and maxLines must be null when expands is true.',
        ),
        assert(textScaleFactor != null),
        assert(textWidthBasis != null),
        assert(paintCursorAboveText != null),
        assert(obscureText != null),
        assert(cursorWidth != null && cursorWidth >= 0.0),
        assert(forceLine != null),
        assert(devicePixelRatio != null),
        _textPainter = TextPainter(
          text: text,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          locale: locale,
          strutStyle: strutStyle,
          textWidthBasis: textWidthBasis,
          // maxLines: maxLines ?? null,
        ),
        _cursorColor = cursorColor,
        _showCursor = showCursor ?? ValueNotifier<bool>(false),
        _maxLines = maxLines,
        _minLines = minLines,
        _expands = expands,
        _selectionColor = selectionColor,
        _selection = selection,
        _cursorWidth = cursorWidth,
        _cursorOffset = cursorOffset,
        _paintCursorOnTop = paintCursorAboveText,
        _devicePixelRatio = devicePixelRatio,
        _startHandleLayerLink = startHandleLayerLink,
        _endHandleLayerLink = endHandleLayerLink,
        _obscureText = obscureText,
        _forceLine = forceLine {
    assert(_showCursor != null);
    assert(!_showCursor.value || cursorColor != null);
  }

  double _textLayoutLastMaxWidth;
  double _textLayoutLastMinWidth;

  Offset getPointForPosition(TextPosition position) {
    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    return localToGlobal(_textPainter.getOffsetForCaret(position, Rect.zero)) +
        _paintOffset;
  }

  TextPosition getPositionForPoint(Offset globalPosition) {
    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    globalPosition += -_paintOffset;

    final Offset targetPosition = globalToLocal(globalPosition);
    return _textPainter.getPositionForOffset(targetPosition);
  }

  double _previousXLocation = 0.0;

  TextPosition getPreviousLinePosition(Offset globalPosition,
      {bool preserveLastLocation = false}) {
    assert(preserveLastLocation != null);

    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    globalPosition += -_paintOffset;

    final double verticalOffset = -0.5 * preferredLineHeight;
    Offset targetPosition =
        globalToLocal(globalPosition).translate(0.0, verticalOffset);

    if (preserveLastLocation) {
      _previousXLocation = math.max(_previousXLocation, targetPosition.dx);
      targetPosition = Offset(_previousXLocation, targetPosition.dy);
    } else {
      _previousXLocation = targetPosition.dx;
    }

    return _textPainter.getPositionForOffset(targetPosition);
  }

  TextPosition getNextLinePosition(Offset globalPosition,
      {bool preserveLastLocation = false}) {
    assert(preserveLastLocation != null);

    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    globalPosition += -_paintOffset;

    final double verticalOffset = 1.5 * preferredLineHeight;

    Offset targetPosition =
        globalToLocal(globalPosition).translate(0.0, verticalOffset);

    if (preserveLastLocation) {
      _previousXLocation = math.max(_previousXLocation, targetPosition.dx);
      targetPosition = Offset(_previousXLocation, targetPosition.dy);
    } else {
      _previousXLocation = targetPosition.dx;
    }

    return _textPainter.getPositionForOffset(targetPosition);
  }

  TextWidthBasis get textWidthBasis => _textPainter.textWidthBasis;
  set textWidthBasis(TextWidthBasis value) {
    assert(value != null);
    if (_textPainter.textWidthBasis == value) return;
    _textPainter.textWidthBasis = value;
    markNeedsTextLayout();
  }

  double get devicePixelRatio => _devicePixelRatio;
  double _devicePixelRatio;
  set devicePixelRatio(double value) {
    if (devicePixelRatio == value) return;
    _devicePixelRatio = value;
    markNeedsTextLayout();
  }

  bool get obscureText => _obscureText;
  bool _obscureText;
  set obscureText(bool value) {
    if (_obscureText == value) return;
    _obscureText = value;
    markNeedsSemanticsUpdate();
  }

  Color get cursorColor => _cursorColor;
  Color _cursorColor;
  set cursorColor(Color value) {
    if (_cursorColor == value) return;
    _cursorColor = value;
    markNeedsPaint();
  }

  ValueNotifier<bool> get showCursor => _showCursor;
  ValueNotifier<bool> _showCursor;
  set showCursor(ValueNotifier<bool> value) {
    assert(value != null);
    if (_showCursor == value) return;
    _showCursor.removeListener(markNeedsPaint);
    _showCursor = value;
    _showCursor.addListener(markNeedsPaint);
    markNeedsPaint();
  }

  bool get paintCursorAboveText => _paintCursorOnTop;
  bool _paintCursorOnTop;
  set paintCursorAboveText(bool value) {
    if (_paintCursorOnTop == value) return;
    _paintCursorOnTop = value;
    markNeedsLayout();
  }

  bool get forceLine => _forceLine;
  bool _forceLine = false;
  set forceLine(bool value) {
    assert(value != null);
    if (_forceLine == value) return;
    _forceLine = value;
    markNeedsLayout();
  }

  int get maxLines => _maxLines;
  int _maxLines;

  bool get _isMultiline => maxLines != 1;

  /// The value may be null. If it is not null, then it must be greater than zero.
  set maxLines(int value) {
    assert(value == null || value > 0);
    if (maxLines == value) return;
    _maxLines = value;
    markNeedsTextLayout();
  }

  int get minLines => _minLines;
  int _minLines;

  /// The value may be null. If it is not null, then it must be greater than zero.
  set minLines(int value) {
    assert(value == null || value > 0);
    if (minLines == value) return;
    _minLines = value;
    markNeedsTextLayout();
  }

  bool get expands => _expands;
  bool _expands;
  set expands(bool value) {
    assert(value != null);
    if (expands == value) return;
    _expands = value;
    markNeedsTextLayout();
  }

  Color get selectionColor => _selectionColor;
  Color _selectionColor;
  set selectionColor(Color value) {
    if (_selectionColor == value) return;
    _selectionColor = value;
    markNeedsPaint();
  }

  double get textScaleFactor => _textPainter.textScaleFactor;
  set textScaleFactor(double value) {
    assert(value != null);
    if (_textPainter.textScaleFactor == value) return;
    _textPainter.textScaleFactor = value;
    markNeedsTextLayout();
  }

  List<TextBox> _selectionRects;

  TextSelection get selection => _selection;
  TextSelection _selection;
  set selection(TextSelection value) {
    if (_selection == value) return;
    _selection = value;
    _selectionRects = null;
    markNeedsPaint();
    markNeedsSemanticsUpdate();
  }

  /// Cursor thickness
  double get cursorWidth => _cursorWidth;
  double _cursorWidth = 1.0;
  set cursorWidth(double value) {
    if (_cursorWidth == value) return;
    _cursorWidth = value;
    markNeedsLayout();
  }

  Offset get cursorOffset => _cursorOffset;
  Offset _cursorOffset;
  set cursorOffset(Offset value) {
    if (_cursorOffset == value) return;
    _cursorOffset = value;
    markNeedsLayout();
  }

  LayerLink get startHandleLayerLink => _startHandleLayerLink;
  LayerLink _startHandleLayerLink;
  set startHandleLayerLink(LayerLink value) {
    if (_startHandleLayerLink == value) return;
    _startHandleLayerLink = value;
    markNeedsPaint();
  }

  LayerLink get endHandleLayerLink => _endHandleLayerLink;
  LayerLink _endHandleLayerLink;
  set endHandleLayerLink(LayerLink value) {
    if (_endHandleLayerLink == value) return;
    _endHandleLayerLink = value;
    markNeedsPaint();
  }

  String _cachedPlainText;
  String get _plainText {
    _cachedPlainText ??= _textPainter.text.toPlainText();
    return _cachedPlainText;
  }

  TextSpan get text => _textPainter.text as TextSpan;
  final TextPainter _textPainter;
  set text(TextSpan value) {
    if (_textPainter.text == value) return;
    _textPainter.text = value;
    _cachedPlainText = null;
    markNeedsTextLayout();
    markNeedsSemanticsUpdate();
  }

  /// How the text should be aligned horizontally.
  ///
  /// This must not be null.
  TextAlign get textAlign => _textPainter.textAlign;
  set textAlign(TextAlign value) {
    assert(value != null);
    if (_textPainter.textAlign == value) return;
    _textPainter.textAlign = value;
    markNeedsTextLayout();
  }

  TextDirection get textDirection => _textPainter.textDirection;
  set textDirection(TextDirection value) {
    assert(value != null);
    if (_textPainter.textDirection == value) return;
    _textPainter.textDirection = value;
    markNeedsTextLayout();
    markNeedsSemanticsUpdate();
  }

  Locale get locale => _textPainter.locale;
  set locale(Locale value) {
    if (_textPainter.locale == value) return;
    _textPainter.locale = value;
    markNeedsTextLayout();
  }

  StrutStyle get strutStyle => _textPainter.strutStyle;
  set strutStyle(StrutStyle value) {
    if (_textPainter.strutStyle == value) return;
    _textPainter.strutStyle = value;
    markNeedsTextLayout();
  }

  Offset get _paintOffset {
    assert(_contentExtent != null);

    return -_contentExtent;
  }

  Offset _contentExtent = Offset.zero;

  Rect get _caretPrototype {
    return Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight - 2.0);
  }

  ValueListenable<bool> get selectionStartInViewport =>
      _selectionStartInViewport;
  final ValueNotifier<bool> _selectionStartInViewport =
      ValueNotifier<bool>(true);

  ValueListenable<bool> get selectionEndInViewport => _selectionEndInViewport;
  final ValueNotifier<bool> _selectionEndInViewport = ValueNotifier<bool>(true);

  void _layoutText({double minWidth = 0.0, double maxWidth = double.infinity}) {
    assert(maxWidth != null && minWidth != null);

    if (_textLayoutLastMaxWidth == maxWidth &&
        _textLayoutLastMinWidth == minWidth) return;

    final double availableMaxWidth = math.max(0.0, maxWidth + cursorWidth);
    final double availableMinWidth = math.min(minWidth, availableMaxWidth);
    final double textMaxWidth =
        _isMultiline ? availableMaxWidth : double.infinity;
    final double textMinWidth =
        forceLine ? availableMaxWidth : availableMinWidth;

    _textPainter.layout(
      minWidth: textMinWidth,
      maxWidth: textMaxWidth,
    );

    _textLayoutLastMaxWidth = maxWidth;
    _textLayoutLastMinWidth = minWidth;
  }

  double get preferredLineHeight => _textPainter.preferredLineHeight;

  double _preferredHeight(double width) {
    final bool lockedMax = maxLines != null && minLines == null;
    final bool lockedBoth = minLines != null && minLines == maxLines;
    final bool singleLine = maxLines == 1;

    if (singleLine || lockedMax || lockedBoth) {
      return preferredLineHeight * maxLines;
    }

    // Clamp height to minLines or maxLines if needed.
    final bool minLimited = minLines != null && minLines > 1;
    final bool maxLimited = maxLines != null;

    if (minLimited || maxLimited) {
      _layoutText(maxWidth: width);
      if (minLimited && _textPainter.height < preferredLineHeight * minLines) {
        return preferredLineHeight * minLines;
      }
      if (maxLimited && _textPainter.height > preferredLineHeight * maxLines) {
        return preferredLineHeight * maxLines;
      }
    }

    // Set the height based on the content.
    if (width == double.infinity) {
      final String text = _plainText;
      int lines = 1;

      for (int index = 0; index < text.length; index += 1) {
        if (text.codeUnitAt(index) == 0x0A) // count explicit line breaks
          lines += 1;
      }

      return preferredLineHeight * lines;
    }

    _layoutText(maxWidth: width);
    return math.max(preferredLineHeight, _textPainter.height);
  }

  void _paintCaret(
      Canvas canvas, Offset effectiveOffset, TextPosition textPosition) {
    final paint = Paint()
      ..color =
          selection.isCollapsed ? _cursorColor : _cursorColor.withOpacity(1.0);

    final caretOffset =
        _textPainter.getOffsetForCaret(textPosition, _caretPrototype) +
            effectiveOffset;

    Rect caretRect = _caretPrototype.shift(caretOffset);

    caretRect = Rect.fromLTRB(
        caretRect.left.roundToDouble(),
        caretRect.top.roundToDouble(),
        caretRect.right.roundToDouble(),
        caretRect.bottom.roundToDouble());

    canvas.drawRect(caretRect, paint);
  }

  void _paintSelection(Canvas canvas, Offset effectiveOffset) {
    _selectionRects ??= _textPainter.getBoxesForSelection(_selection);
    final paint = Paint()..color = _selectionColor;

    for (final box in _selectionRects) {
      canvas.drawRect(box.toRect().shift(effectiveOffset), paint);
    }
  }

  void _paintContents(PaintingContext context, Offset offset) {
    assert(_textLayoutLastMaxWidth == constraints.maxWidth &&
        _textLayoutLastMinWidth == constraints.minWidth);

    final Offset effectiveOffset = offset + _paintOffset;

    bool showCaret = false;
    bool showSelection = false;

    if (_selection != null) {
      if (_selection.isCollapsed && _showCursor.value && cursorColor != null)
        showCaret = true;
      if (!_selection.isCollapsed && _selectionColor != null)
        showSelection = true;
    }

    if (showSelection) {
      _paintSelection(context.canvas, effectiveOffset);
    }

    if (paintCursorAboveText)
      _textPainter.paint(context.canvas, effectiveOffset);

    if (showCaret) {
      _paintCaret(context.canvas, effectiveOffset, _selection.extent);
    }

    if (!paintCursorAboveText)
      _textPainter.paint(context.canvas, effectiveOffset);
  }

  @override
  void attach(PipelineOwner owner) {
    super.attach(owner);
    _showCursor.addListener(markNeedsPaint);
  }

  @override
  void detach() {
    _showCursor.removeListener(markNeedsPaint);
    super.detach();
  }

  @override
  double computeMinIntrinsicWidth(double height) {
    _layoutText(maxWidth: double.infinity);
    return _textPainter.minIntrinsicWidth;
  }

  @override
  double computeMaxIntrinsicWidth(double height) {
    _layoutText(maxWidth: double.infinity);
    return _textPainter.maxIntrinsicWidth + cursorWidth;
  }

  @override
  double computeDistanceToActualBaseline(TextBaseline baseline) {
    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    return _textPainter.computeDistanceToActualBaseline(baseline);
  }

  @protected
  void markNeedsTextLayout() {
    _textLayoutLastMaxWidth = null;
    _textLayoutLastMinWidth = null;
    markNeedsLayout();
  }

  @override
  void systemFontsDidChange() {
    super.systemFontsDidChange();
    _textPainter.markNeedsLayout();
    _textLayoutLastMaxWidth = null;
    _textLayoutLastMinWidth = null;
  }

  @override
  void performLayout() {
    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);
    _selectionRects = null;

    final double width = forceLine
        ? constraints.maxWidth
        : constraints.constrainWidth(_textPainter.size.width + cursorWidth);

    size = Size(width,
        constraints.constrainHeight(_preferredHeight(constraints.maxWidth)));
  }

  double get _lineLayoutWidth {
    assert(!_isMultiline);
      return _textPainter
          .getOffsetForCaret(TextPosition(offset: _plainText.length), Rect.zero)
          .dx;
  }

  double get _layoutHeight {
    return _textPainter.height;
  }

  double _localLineHeight(double dy) {
    return (dy / preferredLineHeight).roundToDouble() * preferredLineHeight;
  }

  void _updateCaretPosition() {
    if (!_isMultiline && _lineLayoutWidth > size.width) {
      double layoutWidth = _lineLayoutWidth;

      final Offset caretOffset =
          _textPainter.getOffsetForCaret(selection.extent, Rect.zero);

      final double pos = caretOffset.dx + cursorWidth;
      layoutWidth += cursorWidth;

      if (layoutWidth - _contentExtent.dx < size.width) {
        _contentExtent = Offset(layoutWidth - size.width, 0.0);
      } else if (caretOffset.dx < _contentExtent.dx) {
        _contentExtent = Offset(caretOffset.dx, 0.0);
      } else if (pos > _contentExtent.dx + size.width) {
        _contentExtent = Offset(pos - size.width, 0.0);
      }
    } else if (_isMultiline && _layoutHeight > size.height) {
      final Offset caretOffset =
          _textPainter.getOffsetForCaret(selection.extent, Rect.zero);

      final double pos = _localLineHeight(caretOffset.dy);
      final double posUp = caretOffset.dy + preferredLineHeight * -0.5;
      final double posDown = caretOffset.dy + preferredLineHeight * 1.5;

      if (_layoutHeight - _contentExtent.dy < _localLineHeight(size.height)) {
        _contentExtent =
            Offset(0.0, _layoutHeight - _localLineHeight(size.height));
      } else if (posUp < _contentExtent.dy) {
        _contentExtent = Offset(0.0, pos);
      } else if (posDown > _contentExtent.dy + _localLineHeight(size.height)) {
        _contentExtent = Offset(
            0.0, pos - _localLineHeight(size.height) + preferredLineHeight);
      }
    } else {
      _contentExtent = Offset.zero;
    }
  }

  @override
  void paint(PaintingContext context, Offset offset) {
    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);

    _updateCaretPosition();

    context.pushClipRect(
        needsCompositing, offset, Offset.zero & size, _paintContents);

    // _paintContents(context, offset);
  }

  @override
  Rect describeApproximatePaintClip(RenderObject child) => Offset.zero & size;
}
